import os
from aiogram import Router, F
from aiogram.types import (
    Message,
    MenuButtonWebApp, WebAppInfo, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
)
from aiogram.filters import CommandStart
from aiogram.utils.markdown import hlink

from bot.config import WEBAPP_URL
from users.services import get_or_create_tg_user, check_user_subscriptions

router = Router()



def build_subs_keyboard(channels) -> InlineKeyboardMarkup:
    rows = []
    for ch in channels:
        link = ch.public_link or "#"
        text = f"–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è: {ch.title}"
        rows.append([InlineKeyboardButton(text=text, url=link)])
    rows.append([InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="subs:recheck")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


@router.message(CommandStart())
async def start(message: Message):
    u = message.from_user
    # 1) —Å–æ–∑–¥–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    await get_or_create_tg_user(
        tg_id=u.id,
        username=u.username,
        first_name=u.first_name,
        last_name=u.last_name,
        language_code=u.language_code,
        is_premium=getattr(u, "is_premium", False),
    )

    # 2) —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É WebApp –≤ –º–µ–Ω—é
    await message.bot.set_chat_menu_button(
        menu_button=MenuButtonWebApp(text="üõç –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", web_app=WebAppInfo(url=WEBAPP_URL))
    )

    # 3) –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏
    ok, not_joined = await check_user_subscriptions(message.bot, u.id)
    if not ok:
        text = (
            "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã –Ω–∏–∂–µ –∏ –Ω–∞–∂–º–∏—Ç–µ "
            f"{hlink('¬´‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è¬ª', '#')} –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏."
        )
        await message.answer(text, reply_markup=build_subs_keyboard(not_joined))
        return

    # 4) –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n"
        "‚ùì –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ? –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –º–æ–∂–Ω–æ –ø–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–Ω–æ–ø–∫–µ\n"
        "–ü—Ä–æ–±–ª–µ–º—ã —Å –±–æ—Ç–æ–º? –ü—Ä–æ–ø–∏—à–∏—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π",
    )


@router.callback_query(F.data == "subs:recheck")
async def subs_recheck(cq: CallbackQuery):
    ok, not_joined = await check_user_subscriptions(cq.bot, cq.from_user.id)
    if ok:
        await cq.message.edit_text("–°–ø–∞—Å–∏–±–æ! –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –û—Ç–∫—Ä–æ–π—Ç–µ –º–∞–≥–∞–∑–∏–Ω —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é ¬´üõç –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω¬ª. ‚úÖ")
    else:
        await cq.answer("–ï—â—ë –Ω–µ –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω—ã", show_alert=True)
        await cq.message.edit_reply_markup(reply_markup=build_subs_keyboard(not_joined))